// v28.07.25

const isOBS = () => {
	return !window.navigator.userAgent || window.navigator.userAgent.includes("OBS");
};

let widgetData = {};
let allowModerators = true;
let toggleCommand = '!dst-boss-toggle';
let setDoneCommand = '!dst-boss-done';
let setTodoCommand = '!dst-boss-todo';
let setAllDoneCommand = '!dst-boss-alldone';
let resetCommand = '!dst-boss-reset';
let bossList = [];
window.addEventListener('onWidgetLoad', function(obj) {
	widgetData = obj.detail.fieldData;
	allowModerators = widgetData.allow_command_for_moderators;
	toggleCommand = widgetData.toggle_command;
	setDoneCommand = widgetData.set_done_command;
	setTodoCommand = widgetData.set_todo_command;
	setAllDoneCommand = widgetData.set_all_done_command;
	resetCommand = widgetData.reset_command;
	bossList = $('#boss-list > img').map((index, elem) => elem.id).get();

	$('#boss-list').addClass(widgetData.img_type);
	$('#boss-list').addClass(widgetData.widget_orientation);

	if (isOBS()) {
		if (widgetData.boss_opacity === 0) {
			addStyle('#boss-list > img:not(.done)', 'display', 'none');
		}
		if (widgetData.boss_done_opacity === 0) {
			addStyle('#boss-list > img.done', 'display', 'none');
		}
	} else {
		if (widgetData.boss_opacity === 0) {
			addStyle('#boss-list > img', 'opacity', '1');
		}
		if (widgetData.boss_done_opacity === 0) {
			addStyle('#boss-list > img.done', 'opacity', '1');
		}
	}

	const bossTypes = ['dst', 'winter', 'forge', 'shipwrecked', 'hamlet'];
	bossTypes.filter((bossType) => !widgetData[`${bossType}_boss_type_display`])
		.forEach((bossType) => addStyle(`#boss-list > img[data-type='${bossType}']`, 'display', 'none'));

	bossList.forEach((bossKey) => {
		$(`#boss-list > img#${bossKey}`).click(() => progress.toggle(bossKey));
		if (!widgetData[`${bossKey}_display`]) {
			$(`#boss-list > img#${bossKey}`).addClass('hidden');
		}
	});

	progress.init();
	setInterval(progress.checkUpdates, 2000);
 	$('#boss-list').removeClass('hidden');
});

window.addEventListener('onEventReceived', function(obj) {
	if (!obj.detail.event) {
		return;
	}
	const listener = obj.detail.listener.split('-')[0];
	const event = obj.detail.event;

	if (listener === 'message') {
		const [command, ...args] = event.data.text.split(' ');
		const isBroadcaster = event.data.badges.some(badge => badge.type === 'broadcaster');
		const isModerator = event.data.badges.some(badge => badge.type === 'moderator');
		if (!isBroadcaster && (!allowModerators || !isModerator)) return;

		if (resetCommand && (command === resetCommand)) {
			return progress.resetAll();
		}
		if (setAllDoneCommand && (command === setAllDoneCommand)) {
			return progress.setAllDone();
		}

		if (args.length === 0) {
			return;
		}
		const bossKey = findBossKey(args);
		if (!bossKey) {
			return;
		}

		if (toggleCommand && (command === toggleCommand)) {
			return progress.toggle(bossKey);
		}
		if (setTodoCommand && (command === setTodoCommand)) {
			return progress.setTodo(bossKey);
		}
		if (setDoneCommand && (command === setDoneCommand)) { 
			return progress.setDone(bossKey);
		}
	}
});

function findBossKey(args) {
	if (args.length === 0) return;
	return bossList.find((bossKey) => widgetData[`${bossKey}_command_key`].toLowerCase() === args[0].toLowerCase());
}

function addStyle(selector, key, value) {
	$('head').append(`<style type="text/css">${selector} { ${key}: ${value}; }</style>`);
}

const progress = (() => {
	let last_refresh = new Date();
	const LAST_UPDATE_DATA_NAME = "last-update";
	const BOSS_LIST_DATA_NAME = "dst-boss-done-list";

	let dones = [];
	const setBossDones = (new_dones) => {
		dones = new_dones;
		SE_API.store.set(BOSS_LIST_DATA_NAME, dones);
		bossList
			.forEach((bossKey) => {
				$(`#boss-list > img#${bossKey}`).removeClass('done');
				if (dones.includes(bossKey)) {
					$(`#boss-list > img#${bossKey}`).addClass('done');
				}
			});
	};

	const notifyUpdate = () => {
		last_refresh = new Date();
		SE_API.store.set(LAST_UPDATE_DATA_NAME, last_refresh);
	};

	return {
		init: () => {
			SE_API.store.get(BOSS_LIST_DATA_NAME).then((obj) => {
				if (!obj) {
					setBossDones([]);
				} else {
					setBossDones(obj);
				}
			});
		},
		checkUpdates: () => {
			SE_API.store.get(LAST_UPDATE_DATA_NAME).then((last_update) => {
				if (!last_update || last_refresh >= last_update.value) return;
				last_refresh = last_update.value;
				progress.refresh();
			});
		},
		refresh: () => {
			SE_API.store.get(BOSS_LIST_DATA_NAME).then((obj) => {
				setBossDones(obj);
			});
		},
		toggle: (bossKey) => {
			if (dones.includes(bossKey)) {
				setBossDones(dones.filter(key => key !== bossKey));
			} else {
				setBossDones([...dones, bossKey]);
			}
			notifyUpdate();
		},
		setTodo: (bossKey) => {
			if (dones.includes(bossKey)) {
				setBossDones(dones.filter(key => key !== bossKey));
				notifyUpdate();
			}
		},
		setDone: (bossKey) => {
			if (!dones.includes(bossKey)) {
				setBossDones([...dones, bossKey]);
				notifyUpdate();
			}
		},
		setAllDone() {
			setBossDones(Object.keys(bossList));
			notifyUpdate();
		},
		resetAll() {
			setBossDones([]);
			notifyUpdate();
		}
	};
})();
